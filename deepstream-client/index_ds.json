{
    _url: '10.1.2.32:6020',
    _options: 
     { heartbeatInterval: 30000,
       reconnectIntervalIncrement: 4000,
       maxReconnectInterval: 180000,
       maxReconnectAttempts: 5,
       rpcAckTimeout: 6000,
       rpcResponseTimeout: 10000,
       subscriptionTimeout: 2000,
       maxMessagesPerPacket: 100,
       timeBetweenSendingQueuedPackages: 16,
       recordReadAckTimeout: 15000,
       recordReadTimeout: 15000,
       recordDeleteTimeout: 15000,
       path: '/deepstream',
       mergeStrategy: [Function: REMOTE_WINS],
       recordDeepCopy: true,
       nodeSocketOptions: null },
    _connection: 
     Connection {
       _client: [Circular],
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _authParams: null,
       _authCallback: null,
       _deliberateClose: false,
       _redirecting: false,
       _tooManyAuthAttempts: false,
       _connectionAuthenticationTimeout: false,
       _challengeDenied: false,
       _queuedMessages: [],
       _reconnectTimeout: null,
       _reconnectionAttempt: 0,
       _currentPacketMessageCount: 0,
       _sendNextPacketTimeout: null,
       _currentMessageResetTimeout: null,
       _endpoint: 
        WebSocket {
          domain: [Object],
          _events: [Object],
          _eventsCount: 4,
          _maxListeners: undefined,
          readyState: 1,
          bytesReceived: 13,
          extensions: {},
          protocol: '',
          _binaryType: 'nodebuffer',
          _finalize: [Object],
          _closeFrameReceived: false,
          _closeFrameSent: false,
          _closeMessage: '',
          _closeTimer: null,
          _finalized: false,
          _closeCode: 1006,
          _receiver: [Object],
          _sender: [Object],
          _socket: [Object],
          _ultron: [Object],
          protocolVersion: 13,
          _isServer: false,
          url: 'ws://10.1.2.32:6020/deepstream',
          _req: null },
       _lastHeartBeat: 1569391881922,
       _heartbeatInterval: 
        Timeout {
          _called: false,
          _idleTimeout: 30000,
          _idlePrev: [Object],
          _idleNext: [Object],
          _idleStart: 22078,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          domain: [Object],
          [Symbol(asyncId)]: 283,
          [Symbol(triggerAsyncId)]: 274 },
       _originalUrl: 'ws://10.1.2.32:6020/deepstream',
       _url: 'ws://10.1.2.32:6020/deepstream',
       _state: 'AWAITING_AUTHENTICATION' },
    _callbacks: 
     { connectionStateChanged: 
        [ [Function: bound ],
          [Function: bound ],
          [Function: bound ],
          [Function: bound ],
          [Function: bound ],
          [Function: bound ] ] },
    _ackTimeoutRegistry: 
     AckTimeoutRegistry {
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _client: [Circular],
       _register: {},
       _counter: 1 },
    event: 
     EventHandler {
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _connection: 
        Connection {
          _client: [Circular],
          _options: [Object],
          _authParams: null,
          _authCallback: null,
          _deliberateClose: false,
          _redirecting: false,
          _tooManyAuthAttempts: false,
          _connectionAuthenticationTimeout: false,
          _challengeDenied: false,
          _queuedMessages: [],
          _reconnectTimeout: null,
          _reconnectionAttempt: 0,
          _currentPacketMessageCount: 0,
          _sendNextPacketTimeout: null,
          _currentMessageResetTimeout: null,
          _endpoint: [Object],
          _lastHeartBeat: 1569391881922,
          _heartbeatInterval: [Object],
          _originalUrl: 'ws://10.1.2.32:6020/deepstream',
          _url: 'ws://10.1.2.32:6020/deepstream',
          _state: 'AWAITING_AUTHENTICATION' },
       _client: [Circular],
       _emitter: Emitter {},
       _listener: {},
       _ackTimeoutRegistry: 
        AckTimeoutRegistry {
          _options: [Object],
          _client: [Circular],
          _register: {},
          _counter: 1 },
       _resubscribeNotifier: 
        ResubscribeNotifier {
          _client: [Circular],
          _resubscribe: [Function: bound ],
          _isReconnecting: true,
          _connectionStateChangeHandler: [Function: bound ] } },
    rpc: 
     RpcHandler {
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _connection: 
        Connection {
          _client: [Circular],
          _options: [Object],
          _authParams: null,
          _authCallback: null,
          _deliberateClose: false,
          _redirecting: false,
          _tooManyAuthAttempts: false,
          _connectionAuthenticationTimeout: false,
          _challengeDenied: false,
          _queuedMessages: [],
          _reconnectTimeout: null,
          _reconnectionAttempt: 0,
          _currentPacketMessageCount: 0,
          _sendNextPacketTimeout: null,
          _currentMessageResetTimeout: null,
          _endpoint: [Object],
          _lastHeartBeat: 1569391881922,
          _heartbeatInterval: [Object],
          _originalUrl: 'ws://10.1.2.32:6020/deepstream',
          _url: 'ws://10.1.2.32:6020/deepstream',
          _state: 'AWAITING_AUTHENTICATION' },
       _client: [Circular],
       _rpcs: {},
       _providers: {},
       _ackTimeoutRegistry: 
        AckTimeoutRegistry {
          _options: [Object],
          _client: [Circular],
          _register: {},
          _counter: 1 },
       _resubscribeNotifier: 
        ResubscribeNotifier {
          _client: [Circular],
          _resubscribe: [Function: bound ],
          _isReconnecting: true,
          _connectionStateChangeHandler: [Function: bound ] } },
    record: 
     RecordHandler {
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _connection: 
        Connection {
          _client: [Circular],
          _options: [Object],
          _authParams: null,
          _authCallback: null,
          _deliberateClose: false,
          _redirecting: false,
          _tooManyAuthAttempts: false,
          _connectionAuthenticationTimeout: false,
          _challengeDenied: false,
          _queuedMessages: [],
          _reconnectTimeout: null,
          _reconnectionAttempt: 0,
          _currentPacketMessageCount: 0,
          _sendNextPacketTimeout: null,
          _currentMessageResetTimeout: null,
          _endpoint: [Object],
          _lastHeartBeat: 1569391881922,
          _heartbeatInterval: [Object],
          _originalUrl: 'ws://10.1.2.32:6020/deepstream',
          _url: 'ws://10.1.2.32:6020/deepstream',
          _state: 'AWAITING_AUTHENTICATION' },
       _client: [Circular],
       _records: {},
       _lists: {},
       _listener: {},
       _writeCallbacks: {},
       _destroyEventEmitter: Emitter {},
       _hasRegistry: 
        SingleNotifier {
          _client: [Circular],
          _connection: [Object],
          _topic: 'R',
          _action: 'H',
          _timeoutDuration: 15000,
          _requests: {},
          _ackTimeoutRegistry: [Object],
          _resubscribeNotifier: [Object],
          _onResponseTimeout: [Function: bound ] },
       _snapshotRegistry: 
        SingleNotifier {
          _client: [Circular],
          _connection: [Object],
          _topic: 'R',
          _action: 'SN',
          _timeoutDuration: 15000,
          _requests: {},
          _ackTimeoutRegistry: [Object],
          _resubscribeNotifier: [Object],
          _onResponseTimeout: [Function: bound ] } },
    presence: 
     PresenceHandler {
       _options: 
        { heartbeatInterval: 30000,
          reconnectIntervalIncrement: 4000,
          maxReconnectInterval: 180000,
          maxReconnectAttempts: 5,
          rpcAckTimeout: 6000,
          rpcResponseTimeout: 10000,
          subscriptionTimeout: 2000,
          maxMessagesPerPacket: 100,
          timeBetweenSendingQueuedPackages: 16,
          recordReadAckTimeout: 15000,
          recordReadTimeout: 15000,
          recordDeleteTimeout: 15000,
          path: '/deepstream',
          mergeStrategy: [Function: REMOTE_WINS],
          recordDeepCopy: true,
          nodeSocketOptions: null },
       _connection: 
        Connection {
          _client: [Circular],
          _options: [Object],
          _authParams: null,
          _authCallback: null,
          _deliberateClose: false,
          _redirecting: false,
          _tooManyAuthAttempts: false,
          _connectionAuthenticationTimeout: false,
          _challengeDenied: false,
          _queuedMessages: [],
          _reconnectTimeout: null,
          _reconnectionAttempt: 0,
          _currentPacketMessageCount: 0,
          _sendNextPacketTimeout: null,
          _currentMessageResetTimeout: null,
          _endpoint: [Object],
          _lastHeartBeat: 1569391881922,
          _heartbeatInterval: [Object],
          _originalUrl: 'ws://10.1.2.32:6020/deepstream',
          _url: 'ws://10.1.2.32:6020/deepstream',
          _state: 'AWAITING_AUTHENTICATION' },
       _client: [Circular],
       _queryEmitter: Emitter {},
       _subscribeEmitter: Emitter {},
       _ackTimeoutRegistry: 
        AckTimeoutRegistry {
          _options: [Object],
          _client: [Circular],
          _register: {},
          _counter: 1 },
       _resubscribeNotifier: 
        ResubscribeNotifier {
          _client: [Circular],
          _resubscribe: [Function: bound _resubscribe],
          _isReconnecting: true,
          _connectionStateChangeHandler: [Function: bound ] },
       _counter: 1,
       _flush: [Function: bound _flush],
       _flushTimeout: null,
       _pendingSubscribes: {},
       _pendingUnsubscribes: {} },
    _messageCallbacks: 
     { E: [Function: bound ],
       P: [Function: bound ],
       R: [Function: bound ],
       U: [Function: bound _$handle],
       X: [Function: bound ] } 